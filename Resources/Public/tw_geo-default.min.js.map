{"version":3,"sources":["Elements/Form/Scripts.js"],"names":["d","Geoselect","elements","this","slice","call","map","e","GeoselectElement","container","id","search","getElementById","latLon","position","submit","initAutocomplete","initMap","onInitialize","prototype","searchAutocomplete","google","maps","places","Autocomplete","componentRestrictions","country","hasAttribute","String","getAttribute","split","item","trim","addListener","handle_autocompletePlaceChanged","bind","el","tagName","parentElement","toLowerCase","toUpperCase","findAncenstorByTagName","addEventListener","event","activeElement","preventDefault","currentTarget","value","reset","mapElement","Map","zoom","center","lat","Number","attributes","lng","streetViewControl","rotateControl","fullscreenControl","zoomControl","mapTypeControl","zoomControlOptions","ControlPosition","LEFT_TOP","styles","featureType","elementType","stylers","color","setLatLon","parentNode","removeChild","classList","add","geoselect","place","getPlace","geometry","removeAttribute","latitude","location","longitude","setAttribute","marker","setPosition","markerIconPath","getDiv","Marker","icon","url","size","Size","scaledSize","anchor","Point","setCenter","setZoom","dispatchEvent","CustomEvent","detail","setMap","addMyLocationControl","navigator","geolocation","controlDiv","createElement","innerHTML","index","getCurrentPosition","coords","controls","RIGHT_BOTTOM","push","geoselectElements","querySelectorAll","length","document"],"mappings":"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","file":"tw_geo-default.min.js","sourcesContent":["(function (d) {\n    /**\n     * Find closest ancestor by tag name.\n     * Hopefully compatible with most browsers.\n     *\n     * @param el    The current element\n     * @param tagName   The tagName to search for\n     */\n    function findAncenstorByTagName(el, tagName) {\n        while ((el = el.parentElement) && !(el.tagName == tagName.toLowerCase()) && !(el.tagName == tagName.toUpperCase())) ;\n        return el;\n    }\n\n    /**\n     * Enhance TYPO3 Geoselect form fields with autocomplete etc.\n     *\n     * @param {NodeList} elements Geoselect elements\n     * @constructor\n     */\n    function Geoselect(elements) {\n        this.elements = [].slice.call(elements).map(e => new GeoselectElement(e));\n    };\n\n    /**\n     *\n     * Enhance a single TYPO3 Geoselect form field with autocomplete etc.\n     * @constructor\n     *\n     * @param element\n     * @returns {null}\n     * @constructor\n     */\n    function GeoselectElement(container) {\n        // Set up all elements, cancel if something important was not found\n        this.container = container || null;\n        if (!this.container || !this.container.id) {\n            return null;\n        }\n\n        this.search = d.getElementById(this.container.id + '-search');\n        this.latLon = d.getElementById(this.container.id + '-lat-lon');\n        if (!this.search || !this.latLon) {\n            return null;\n        }\n\n        this.position = d.getElementById(this.container.id + '-position');\n        this.submit = d.getElementById(this.container.id + '-submit');\n\n        // Initalize enhancements\n        this.initAutocomplete();\n        this.map = this.initMap();\n\n        // Change markup and css classes to signal that everything works\n        this.onInitialize();\n    }\n\n    /**\n     * Try to add autocomplete to search field\n     */\n    GeoselectElement.prototype.initAutocomplete = function () {\n\n        this.searchAutocomplete = new google.maps.places.Autocomplete(this.search, {\n            componentRestrictions: {\n                country: this.container.hasAttribute('data-restrict-countries') ? String(this.container.getAttribute('data-restrict-countries')).split(',').map(function(item){return item.trim()}) : []\n            }\n        });\n        this.searchAutocomplete.addListener('place_changed', this.handle_autocompletePlaceChanged.bind(this));\n\n        // If the focus is still on the autocomplete element,\n        // we want to cancel any form submission, so the user can\n        // select the autocomplete suggestions by keyboard, usually hitting enter.\n        findAncenstorByTagName(this.search, 'form').addEventListener('submit', function (event) {\n            if (d.activeElement == this.search) {\n                event.preventDefault();\n            }\n        }.bind(this));\n\n        this.search.addEventListener('change', function (event) {\n            if (!event.currentTarget.value) {\n                this.reset();\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Try to initialize the dynamic google map\n     *\n     * @returns {google.maps.Map} Google Map\n     */\n    GeoselectElement.prototype.initMap = function () {\n        const mapElement = d.getElementById(this.container.id + '-map');\n        if (!mapElement) {\n            return null;\n        }\n\n        const map = new google.maps.Map(mapElement, {\n            zoom: 6,\n            center: {\n                lat: Number(mapElement.attributes['data-latitude'].value),\n                lng: Number(mapElement.attributes['data-longitude'].value)\n            },\n            streetViewControl: false,\n            rotateControl: false,\n            fullscreenControl: false,\n            zoomControl: false,\n            mapTypeControl: false,\n            zoomControlOptions: { position: google.maps.ControlPosition.LEFT_TOP },\n            styles: [\n                {\n                    \"featureType\": \"poi\",\n                    \"elementType\": \"labels.icon\",\n                    \"stylers\": [\n                        {\n                            \"color\": \"#9d9d9d\"\n                        }\n                    ]\n                },\n                {\n                    \"featureType\": \"poi\",\n                    \"elementType\": \"labels.text.fill\",\n                    \"stylers\": [\n                        {\n                            \"color\": \"#9d9d9d\"\n                        }\n                    ]\n                }\n            ]\n        });\n        // this.addMyLocationControl();\n\n        if (this.container.attributes['data-lat-lon']) {\n            const latLon = this.container.attributes['data-lat-lon'].value.split(',');\n            this.setLatLon(Number(latLon[0]), Number(latLon[1]));\n        }\n\n        return map;\n    }\n\n    /**\n     * Gets called when everything was set up successfully\n     * and changes some CSS classes, hides elements etc.\n     */\n    GeoselectElement.prototype.onInitialize = function () {\n        if (this.position) {\n            this.position.parentNode.removeChild(this.position);\n        }\n        this.container.classList.add('Geoselect--js');\n        this.container.geoselect = this;\n    }\n\n    /**\n     * Set value of latlon form field on selecting something from autocomplete\n     */\n    GeoselectElement.prototype.handle_autocompletePlaceChanged = function (event) {\n        // Cancel if there is no autocomplete result\n        const place = this.searchAutocomplete.getPlace();\n        if (!place || !place.geometry) {\n            this.container.removeAttribute('data-lat-lon');\n            return null;\n        }\n\n        // Get lat and lon\n        const latitude = place.geometry.location.lat();\n        const longitude = place.geometry.location.lng();\n        this.container.setAttribute('data-lat-lon', latitude + ',' + longitude);\n        this.setLatLon(latitude, longitude);\n    }\n\n    /**\n     * Set latitude and longitude\n     *\n     * @param {Number} latitude Latitude\n     * @param {Number} longitude Longitude\n     */\n    GeoselectElement.prototype.setLatLon = function (latitude, longitude) {\n        // Set value of hidden latitude/longitude field\n        this.latLon.value = (latitude + ',' + longitude);\n\n        // If we have a Google Map\n        if (this.map) {\n            // Add map marker after removing the old one\n            if (!this.marker) {\n                let markerIconPath = this.map.getDiv().attributes['data-marker'];\n                markerIconPath = markerIconPath ? markerIconPath.value : null;\n                this.marker = new google.maps.Marker({\n                    position: { lat: latitude, lng: longitude },\n                    map: this.map,\n                    icon: markerIconPath ? {\n                        url: markerIconPath,\n                        size: new google.maps.Size(48, 68),\n                        scaledSize: new google.maps.Size(32, 45),\n                        anchor: new google.maps.Point(12, 34)\n                    } : null\n                });\n            } else {\n                this.marker.setPosition({ lat: latitude, lng: longitude });\n            }\n\n            // Set map center and zoom in\n            this.map.setCenter({ lat: latitude, lng: longitude });\n            this.map.setZoom(17);\n        }\n\n        this.container.dispatchEvent(new CustomEvent('geoselect_change', {\n            detail: { latitude: latitude, longitude: longitude }\n        }));\n    }\n\n    /**\n     * Reset fields and map\n     */\n    GeoselectElement.prototype.reset = function () {\n        if (this.marker) {\n            this.marker.setMap(null);\n            this.marker = null;\n            const mapElement = d.getElementById(this.container.id + '-map');\n            this.map.setCenter({\n                lat: Number(mapElement.attributes['data-latitude'].value),\n                lng: Number(mapElement.attributes['data-longitude'].value)\n            });\n        }\n\n        this.map.setZoom(6);\n\n        if (this.latLon.value) {\n            this.latLon.value = '';\n        }\n\n        if (this.search.value) {\n            this.search.value = '';\n        }\n\n        this.container.removeAttribute('data-lat-lon');\n        this.container.dispatchEvent(new CustomEvent('geoselect_change', {\n            detail: {}\n        }));\n    }\n\n    /**\n     * Add custom control to map for centering on the users current position\n     */\n    GeoselectElement.prototype.addMyLocationControl = function () {\n        if (!navigator.geolocation) {\n            return false;\n        }\n\n        const controlDiv = d.createElement('div');\n        controlDiv.innerHTML = d.getElementById('GoogleMap-MyLocation').innerHTML;\n        controlDiv.index = 1;\n        controlDiv.addEventListener('click', function (event) {\n            navigator.geolocation.getCurrentPosition(function (position) {\n                this.setLatLon(position.coords.latitude, position.coords.longitude);\n                this.search.value = position.coords.latitude + ',' + position.coords.longitude;\n                this.map.setZoom(14);\n            }.bind(this));\n        }.bind(this));\n        this.map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(controlDiv);\n    }\n\n    /**\n     * On DOMContentLoaded\n     */\n    d.addEventListener('DOMContentLoaded', function (event) {\n        const geoselectElements = d.querySelectorAll('.Geoselect');\n        if (geoselectElements.length) {\n            new Geoselect(geoselectElements);\n        }\n    });\n})(document)\n\n"]}