{"version":3,"sources":["Elements/Form/Scripts.js"],"names":["d","Geoselect","elements","this","slice","call","map","e","GeoselectElement","container","id","search","getElementById","latLon","position","submit","initAutocomplete","initMap","onInitialize","prototype","hasAttribute","getAttribute","searchAutocomplete","google","maps","places","Autocomplete","componentRestrictions","country","String","split","item","trim","addListener","handle_autocompletePlaceChanged","bind","el","tagName","parentElement","toLowerCase","toUpperCase","findAncenstorByTagName","addEventListener","event","activeElement","preventDefault","currentTarget","value","reset","defaultStyles","featureType","elementType","stylers","color","mapElement","attributes","Map","zoom","center","lat","Number","length","lng","streetViewControl","rotateControl","fullscreenControl","zoomControl","mapTypeControl","zoomControlOptions","ControlPosition","LEFT_TOP","styles","window","googleMapStyles","parentNode","removeChild","classList","add","geoselect","dispatchEvent","CustomEvent","place","getPlace","geometry","removeAttribute","latitude","location","longitude","setAttribute","setLatLon","marker","setPosition","markerIconPath","getDiv","Marker","icon","url","size","Size","scaledSize","anchor","Point","setCenter","setZoom","detail","setMap","addMyLocationControl","navigator","geolocation","controlDiv","createElement","innerHTML","index","getCurrentPosition","coords","controls","RIGHT_BOTTOM","push","geoselectElements","querySelectorAll","document"],"mappings":"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","file":"tw_geo-default.min.js","sourcesContent":["(function (d) {\n    /**\n     * Find closest ancestor by tag name.\n     * Hopefully compatible with most browsers.\n     *\n     * @param el    The current element\n     * @param tagName   The tagName to search for\n     */\n    function findAncenstorByTagName(el, tagName) {\n        while ((el = el.parentElement) && !(el.tagName == tagName.toLowerCase()) && !(el.tagName == tagName.toUpperCase())) ;\n        return el;\n    }\n\n    /**\n     * Enhance TYPO3 Geoselect form fields with autocomplete etc.\n     *\n     * @param {NodeList} elements Geoselect elements\n     * @constructor\n     */\n    function Geoselect(elements) {\n        this.elements = [].slice.call(elements).map(e => new GeoselectElement(e));\n    };\n\n    /**\n     *\n     * Enhance a single TYPO3 Geoselect form field with autocomplete etc.\n     * @constructor\n     *\n     * @param element\n     * @returns {null}\n     * @constructor\n     */\n    function GeoselectElement(container) {\n        // Set up all elements, cancel if something important was not found\n        this.container = container || null;\n        if (!this.container || !this.container.id) {\n            return null;\n        }\n\n        this.search = d.getElementById(this.container.id + '-search');\n        this.latLon = d.getElementById(this.container.id + '-lat-lon');\n        if (!this.search || !this.latLon) {\n            return null;\n        }\n\n        this.position = d.getElementById(this.container.id + '-position');\n        this.submit = d.getElementById(this.container.id + '-submit');\n\n        // Initalize enhancements\n        this.initAutocomplete();\n        this.map = this.initMap();\n\n        // Change markup and css classes to signal that everything works\n        this.onInitialize();\n    }\n\n    /**\n     * Try to add autocomplete to search field\n     */\n    GeoselectElement.prototype.initAutocomplete = function () {\n\n        if(this.search.hasAttribute('autocomplete')) {\n            if(this.search.getAttribute('autocomplete') === 'off') {\n                return null;\n            }\n        };\n\n        this.searchAutocomplete = new google.maps.places.Autocomplete(this.search, {\n            componentRestrictions: {\n                country: this.container.hasAttribute('data-restrict-countries') ? String(this.container.getAttribute('data-restrict-countries')).split(',').map(function (item) {\n                    return item.trim()\n                }) : []\n            }\n        });\n        this.searchAutocomplete.addListener('place_changed', this.handle_autocompletePlaceChanged.bind(this));\n\n        // If the focus is still on the autocomplete element,\n        // we want to cancel any form submission, so the user can\n        // select the autocomplete suggestions by keyboard, usually hitting enter.\n\n        findAncenstorByTagName(this.search, 'form').addEventListener('submit', function (event) {\n            if (d.activeElement == this.search) {\n                event.preventDefault();\n            }\n        }.bind(this));\n\n        this.search.addEventListener('change', function (event) {\n            if (!event.currentTarget.value) {\n                this.reset();\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Default map styles\n     *\n     * @type {*[]}\n     */\n    GeoselectElement.defaultStyles = [\n        {\n            \"featureType\": \"poi\",\n            \"elementType\": \"labels.icon\",\n            \"stylers\": [\n                {\n                    \"color\": \"#9d9d9d\"\n                }\n            ]\n        },\n        {\n            \"featureType\": \"poi\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [\n                {\n                    \"color\": \"#9d9d9d\"\n                }\n            ]\n        }\n    ];\n\n    /**\n     * Try to initialize the dynamic google map\n     *\n     * @returns {google.maps.Map} Google Map\n     */\n    GeoselectElement.prototype.initMap = function () {\n        const mapElement = d.getElementById(this.container.id + '-map');\n        if (!mapElement) {\n            return null;\n        }\n\n        let latLon = this.container.hasAttribute('data-lat-lon') ? this.container.attributes['data-lat-lon'].value.split(',') : [];\n        const map = new google.maps.Map(mapElement, {\n            zoom: 12,\n            center: {\n                lat: Number((latLon.length === 2) ? latLon[0] : mapElement.attributes['data-latitude'].value),\n                lng: Number((latLon.length === 2) ? latLon[1] : mapElement.attributes['data-longitude'].value)\n            },\n            streetViewControl: false,\n            rotateControl: false,\n            fullscreenControl: false,\n            zoomControl: false,\n            mapTypeControl: false,\n            zoomControlOptions: {position: google.maps.ControlPosition.LEFT_TOP},\n            styles: window.googleMapStyles ? window.googleMapStyles : GeoselectElement.defaultStyles\n\n        });\n        // this.addMyLocationControl();\n        return map;\n    }\n\n    /**\n     * Gets called when everything was set up successfully\n     * and changes some CSS classes, hides elements etc.\n     */\n    GeoselectElement.prototype.onInitialize = function () {\n        if (this.position) {\n            this.position.parentNode.removeChild(this.position);\n        }\n        this.container.classList.add('Geoselect--js');\n        this.container.geoselect = this;\n        this.container.dispatchEvent(new CustomEvent('geoselect_init'));\n    }\n\n    /**\n     * Set value of latlon form field on selecting something from autocomplete\n     */\n    GeoselectElement.prototype.handle_autocompletePlaceChanged = function (event) {\n        // Cancel if there is no autocomplete result\n        const place = this.searchAutocomplete.getPlace();\n        if (!place || !place.geometry) {\n            this.container.removeAttribute('data-lat-lon');\n            return null;\n        }\n\n        // Get lat and lon\n        const latitude = place.geometry.location.lat();\n        const longitude = place.geometry.location.lng();\n        this.container.setAttribute('data-lat-lon', latitude + ',' + longitude);\n        this.setLatLon(latitude, longitude);\n    }\n\n    /**\n     * Set latitude and longitude\n     *\n     * @param {Number} latitude Latitude\n     * @param {Number} longitude Longitude\n     */\n    GeoselectElement.prototype.setLatLon = function (latitude, longitude) {\n        // Set value of hidden latitude/longitude field\n        this.latLon.value = (latitude + ',' + longitude);\n        // If we have a Google Map\n        if (this.map) {\n            // Add map marker after removing the old one\n            if (!this.marker) {\n                let markerIconPath = this.map.getDiv().attributes['data-marker'];\n                markerIconPath = markerIconPath ? markerIconPath.value : null;\n                this.marker = new google.maps.Marker({\n                    position: {lat: latitude, lng: longitude},\n                    map: this.map,\n                    icon: markerIconPath ? {\n                        url: markerIconPath,\n                        size: new google.maps.Size(48, 68),\n                        scaledSize: new google.maps.Size(32, 45),\n                        anchor: new google.maps.Point(12, 34)\n                    } : null\n                });\n            } else {\n                this.marker.setPosition({lat: latitude, lng: longitude});\n            }\n\n            // Set map center and zoom in\n            this.map.setCenter({lat: latitude, lng: longitude});\n            this.map.setZoom(17);\n        }\n\n        this.container.dispatchEvent(new CustomEvent('geoselect_change', {\n            detail: {latitude: latitude, longitude: longitude}\n        }));\n    }\n\n    /**\n     * Reset fields and map\n     */\n    GeoselectElement.prototype.reset = function () {\n        if (this.marker) {\n            this.marker.setMap(null);\n            this.marker = null;\n            const mapElement = d.getElementById(this.container.id + '-map');\n            this.map.setCenter({\n                lat: Number(mapElement.attributes['data-latitude'].value),\n                lng: Number(mapElement.attributes['data-longitude'].value)\n            });\n        }\n\n        this.map.setZoom(6);\n\n        if (this.latLon.value) {\n            this.latLon.value = '';\n        }\n\n        if (this.search.value) {\n            this.search.value = '';\n        }\n\n        this.container.removeAttribute('data-lat-lon');\n        this.container.dispatchEvent(new CustomEvent('geoselect_change', {\n            detail: {}\n        }));\n    }\n\n    /**\n     * Add custom control to map for centering on the users current position\n     */\n    GeoselectElement.prototype.addMyLocationControl = function () {\n        if (!navigator.geolocation) {\n            return false;\n        }\n\n        const controlDiv = d.createElement('div');\n        controlDiv.innerHTML = d.getElementById('GoogleMap-MyLocation').innerHTML;\n        controlDiv.index = 1;\n        controlDiv.addEventListener('click', function (event) {\n            navigator.geolocation.getCurrentPosition(function (position) {\n                this.setLatLon(position.coords.latitude, position.coords.longitude);\n                this.search.value = position.coords.latitude + ',' + position.coords.longitude;\n                this.map.setZoom(14);\n            }.bind(this));\n        }.bind(this));\n        this.map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(controlDiv);\n    }\n\n    /**\n     * On DOMContentLoaded\n     */\n    d.addEventListener('DOMContentLoaded', function (event) {\n        const geoselectElements = d.querySelectorAll('.Geoselect');\n        if (geoselectElements.length) {\n            new Geoselect(geoselectElements);\n        }\n    });\n})(document)\n\n"]}