{"version":3,"sources":["Elements/Form/Scripts.js"],"names":["d","Geoselect","elements","this","slice","call","map","e","GeoselectElement","container","id","search","getElementById","latLon","position","submit","initAutocomplete","initMap","onInitialize","prototype","searchAutocomplete","google","maps","places","Autocomplete","addListener","handle_autocompletePlaceChanged","bind","el","tagName","parentElement","toLowerCase","toUpperCase","findAncenstorByTagName","addEventListener","event","activeElement","preventDefault","currentTarget","value","reset","mapElement","Map","zoom","center","lat","Number","attributes","lng","streetViewControl","rotateControl","fullscreenControl","mapTypeControl","zoomControlOptions","ControlPosition","LEFT_TOP","styles","featureType","elementType","stylers","color","split","setLatLon","parentNode","removeChild","classList","add","geoselect","place","getPlace","geometry","removeAttribute","latitude","location","longitude","setAttribute","marker","setPosition","markerIconPath","getDiv","Marker","icon","url","size","Size","scaledSize","anchor","Point","setCenter","setZoom","dispatchEvent","CustomEvent","detail","setMap","addMyLocationControl","navigator","geolocation","controlDiv","createElement","innerHTML","index","getCurrentPosition","coords","controls","RIGHT_BOTTOM","push","geoselectElements","querySelectorAll","length","document"],"mappings":"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","file":"tw_geo-default.min.js","sourcesContent":["(function (d) {\n    /**\n     * Find closest ancestor by tag name.\n     * Hopefully compatible with most browsers.\n     *\n     * @param el    The current element\n     * @param tagName   The tagName to search for\n     */\n    function findAncenstorByTagName(el, tagName) {\n        while ((el = el.parentElement) && !(el.tagName == tagName.toLowerCase()) && !(el.tagName == tagName.toUpperCase())) ;\n        return el;\n    }\n\n    /**\n     * Enhance TYPO3 Geoselect form fields with autocomplete etc.\n     *\n     * @param {NodeList} elements Geoselect elements\n     * @constructor\n     */\n    function Geoselect(elements) {\n        this.elements = [].slice.call(elements).map(e => new GeoselectElement(e));\n    };\n\n    /**\n     *\n     * Enhance a single TYPO3 Geoselect form field with autocomplete etc.\n     * @constructor\n     *\n     * @param element\n     * @returns {null}\n     * @constructor\n     */\n    function GeoselectElement(container) {\n        // Set up all elements, cancel if something important was not found\n        this.container = container || null;\n        if (!this.container || !this.container.id) {\n            return null;\n        }\n\n        this.search = d.getElementById(this.container.id + '-search');\n        this.latLon = d.getElementById(this.container.id + '-lat-lon');\n        if (!this.search || !this.latLon) {\n            return null;\n        }\n\n        this.position = d.getElementById(this.container.id + '-position');\n        this.submit = d.getElementById(this.container.id + '-submit');\n\n        // Initalize enhancements\n        this.initAutocomplete();\n        this.map = this.initMap();\n\n        // Change markup and css classes to signal that everything works\n        this.onInitialize();\n    }\n\n    /**\n     * Try to add autocomplete to search field\n     */\n    GeoselectElement.prototype.initAutocomplete = function () {\n        this.searchAutocomplete = new google.maps.places.Autocomplete(this.search);\n        this.searchAutocomplete.addListener('place_changed', this.handle_autocompletePlaceChanged.bind(this));\n\n        // If the focus is still on the autocomplete element,\n        // we want to cancel any form submission, so the user can\n        // select the autocomplete suggestions by keyboard, usually hitting enter.\n        findAncenstorByTagName(this.search, 'form').addEventListener('submit', function (event) {\n            if (d.activeElement == this.search) {\n                event.preventDefault();\n            }\n        }.bind(this));\n\n        this.search.addEventListener('change', function (event) {\n            if (!event.currentTarget.value) {\n                this.reset();\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Try to initialize the dynamic google map\n     *\n     * @returns {google.maps.Map} Google Map\n     */\n    GeoselectElement.prototype.initMap = function () {\n        const mapElement = d.getElementById(this.container.id + '-map');\n        if (!mapElement) {\n            return null;\n        }\n\n        const map = new google.maps.Map(mapElement, {\n            zoom: 6,\n            center: {\n                lat: Number(mapElement.attributes['data-latitude'].value),\n                lng: Number(mapElement.attributes['data-longitude'].value)\n            },\n            streetViewControl: false,\n            rotateControl: false,\n            fullscreenControl: false,\n            mapTypeControl: false,\n            zoomControlOptions: { position: google.maps.ControlPosition.LEFT_TOP },\n            styles: [\n                {\n                    \"featureType\": \"poi\",\n                    \"elementType\": \"labels.icon\",\n                    \"stylers\": [\n                        {\n                            \"color\": \"#9d9d9d\"\n                        }\n                    ]\n                },\n                {\n                    \"featureType\": \"poi\",\n                    \"elementType\": \"labels.text.fill\",\n                    \"stylers\": [\n                        {\n                            \"color\": \"#9d9d9d\"\n                        }\n                    ]\n                }\n            ]\n        });\n        // this.addMyLocationControl();\n\n        if (this.container.attributes['data-lat-lon']) {\n            const latLon = this.container.attributes['data-lat-lon'].value.split(',');\n            this.setLatLon(Number(latLon[0]), Number(latLon[1]));\n        }\n\n        return map;\n    }\n\n    /**\n     * Gets called when everything was set up successfully\n     * and changes some CSS classes, hides elements etc.\n     */\n    GeoselectElement.prototype.onInitialize = function () {\n        if (this.position) {\n            this.position.parentNode.removeChild(this.position);\n        }\n        if (this.submit) {\n            this.submit.parentNode.removeChild(this.submit);\n        }\n        this.container.classList.add('Geoselect--js');\n        this.container.geoselect = this;\n    }\n\n    /**\n     * Set value of latlon form field on selecting something from autocomplete\n     */\n    GeoselectElement.prototype.handle_autocompletePlaceChanged = function (event) {\n        // Cancel if there is no autocomplete result\n        const place = this.searchAutocomplete.getPlace();\n        if (!place || !place.geometry) {\n            this.container.removeAttribute('data-lat-lon');\n            return null;\n        }\n\n        // Get lat and lon\n        const latitude = place.geometry.location.lat();\n        const longitude = place.geometry.location.lng();\n        this.container.setAttribute('data-lat-lon', latitude + ',' + longitude);\n        this.setLatLon(latitude, longitude);\n    }\n\n    /**\n     * Set latitude and longitude\n     *\n     * @param {Number} latitude Latitude\n     * @param {Number} longitude Longitude\n     */\n    GeoselectElement.prototype.setLatLon = function (latitude, longitude) {\n        // Set value of hidden latitude/longitude field\n        this.latLon.value = (latitude + ',' + longitude);\n\n        // If we have a Google Map\n        if (this.map) {\n            // Add map marker after removing the old one\n            if (!this.marker) {\n                let markerIconPath = this.map.getDiv().attributes['data-marker'];\n                markerIconPath = markerIconPath ? markerIconPath.value : null;\n                this.marker = new google.maps.Marker({\n                    position: { lat: latitude, lng: longitude },\n                    map: this.map,\n                    icon: markerIconPath ? {\n                        url: markerIconPath,\n                        size: new google.maps.Size(48, 68),\n                        scaledSize: new google.maps.Size(32, 45),\n                        anchor: new google.maps.Point(12, 34)\n                    } : null\n                });\n            } else {\n                this.marker.setPosition({ lat: latitude, lng: longitude });\n            }\n\n            // Set map center and zoom in\n            this.map.setCenter({ lat: latitude, lng: longitude });\n            this.map.setZoom(17);\n        }\n\n        this.container.dispatchEvent(new CustomEvent('geoselect_change', {\n            detail: { latitude: latitude, longitude: longitude }\n        }));\n    }\n\n    /**\n     * Reset fields and map\n     */\n    GeoselectElement.prototype.reset = function () {\n        if (this.marker) {\n            this.marker.setMap(null);\n            this.marker = null;\n            const mapElement = d.getElementById(this.container.id + '-map');\n            this.map.setCenter({\n                lat: Number(mapElement.attributes['data-latitude'].value),\n                lng: Number(mapElement.attributes['data-longitude'].value)\n            });\n        }\n\n        this.map.setZoom(6);\n\n        if (this.latLon.value) {\n            this.latLon.value = '';\n        }\n\n        if (this.search.value) {\n            this.search.value = '';\n        }\n\n        this.container.removeAttribute('data-lat-lon');\n        this.container.dispatchEvent(new CustomEvent('geoselect_change', {\n            detail: {}\n        }));\n    }\n\n    /**\n     * Add custom control to map for centering on the users current position\n     */\n    GeoselectElement.prototype.addMyLocationControl = function () {\n        if (!navigator.geolocation) {\n            return false;\n        }\n\n        const controlDiv = d.createElement('div');\n        controlDiv.innerHTML = d.getElementById('GoogleMap-MyLocation').innerHTML;\n        controlDiv.index = 1;\n        controlDiv.addEventListener('click', function (event) {\n            navigator.geolocation.getCurrentPosition(function (position) {\n                this.setLatLon(position.coords.latitude, position.coords.longitude);\n                this.search.value = position.coords.latitude + ',' + position.coords.longitude;\n                this.map.setZoom(14);\n            }.bind(this));\n        }.bind(this));\n        this.map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(controlDiv);\n    }\n\n    /**\n     * On DOMContentLoaded\n     */\n    d.addEventListener('DOMContentLoaded', function (event) {\n        const geoselectElements = d.querySelectorAll('.Geoselect');\n        if (geoselectElements.length) {\n            new Geoselect(geoselectElements);\n        }\n    });\n})(document)\n\n"]}